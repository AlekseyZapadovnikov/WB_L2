package main

import (
  "fmt"
)

func main() {
  var s = []string{"1", "2", "3"}
  modifySlice(s)
  fmt.Println(s)
}

func modifySlice(i []string) {
  i[0] = "3"
  i = append(i, "4")
  i[1] = "5"
  i = append(i, "6")
}

/*
вывод будет [3, 2, 3]
почему?

потому что слайс - это структура с 3 полями (длина, капасити и указатель на массив с реальными данными)
при передаче аргументов в функцию, они копируются, то есть на момент передачи в функцию в i мы скопировали
следующую структуру

struct myCurSlice {
len = 3
cap = 3
curPtr - указатель на массив ["1", "2", "3"]
}

мы её скопировали и получили точно такую же структуру
i[0] = "3"
изменяет массив по curPtr

после строчки i = append(i, "4"), произойдёт переаллокация данных и теперь curPtr != указатель на массив ["3", "2", "3"]
и после все действия
  i[1] = "5"
  i = append(i, "6")
они меняют уже новый слайс (массив по новому ptr)
*/